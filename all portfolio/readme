🧠 Sentiment Analysis AI in Python
A simple Python AI that uses machine learning to classify text as positive or negative sentiment. Built with scikit-learn, this example shows how to train and use a basic NLP model.

🚀 Features
🔍 Text classification using machine learning (Naive Bayes)

🧾 Example data for positive/negative sentiment

⚡ Fast training and prediction

🧱 Built using scikit-learn pipeline (vectorizer + classifier)

📦 Requirements
Make sure you have Python 3.7+ installed.

Install the required library:

pip install scikit-learn
📁 Files
sentiment_ai.py – main script that trains the model and predicts sentiment

(Optional) requirements.txt – list of dependencies

▶️ How to Run
Clone the repo or copy the script.

Run the script:

python sentiment_ai.py
You’ll see predictions like:

vbnet
Text: "I really love it!" => Sentiment: positive  
Text: "This was the worst day." => Sentiment: negative  
🧪 Example Code Snippet
python
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

model = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', MultinomialNB())
])
💡 Want More?
You can easily expand this project by:

Adding more training data

Using more advanced vectorizers like TfidfVectorizer

Replacing Naive Bayes with deep learning (e.g., BERT)

